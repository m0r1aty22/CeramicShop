@model List<CeramicShop.Models.ViewModels.ProductViewModel>
@using CeramicShop.Models
@using System.Text.Encodings.Web

@{
    ViewBag.Title = "Sản phẩm gốm sứ";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalItems = ViewBag.TotalItems ?? 0;
    var minPrice = ViewBag.MinPrice ?? 0;
    var maxPrice = ViewBag.MaxPrice ?? 10000000;
    var currentSort = ViewBag.CurrentSort ?? "";
    var searchTerm = ViewBag.SearchTerm ?? "";
    var selectedCategoryId = ViewBag.CategoryId;
    var selectedSubCategoryId = ViewBag.SubCategoryId;
    var viewMode = ViewBag.ViewMode ?? "grid";

    var isDefaultSort = currentSort == "";
    var isPriceAscSort = currentSort == "price_asc";
    var isPriceDescSort = currentSort == "price_desc";
    var isNameAscSort = currentSort == "name_asc";
    var isNameDescSort = currentSort == "name_desc";
}

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-3">
            <div class="card category-sidebar mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Danh mục</h5>
                </div>
                <div class="list-group list-group-flush">
                    @{
                        var categoriesList = ViewBag.Categories as IEnumerable<Category> ?? Enumerable.Empty<Category>();
                        var allSubCategories = ViewBag.SubCategories as IEnumerable<SubCategory> ?? Enumerable.Empty<SubCategory>();
                    }
                    @foreach (var categoryItem in categoriesList)
                    {
                        <div class="category-item">
                            <a href="@Url.Action("Index", "Product", new { categoryId = categoryItem.CategoryID, searchTerm, sortOrder = currentSort, minPrice = (ViewBag.MinPriceQuery ?? 0), maxPrice = (ViewBag.MaxPriceQuery ?? 10000000), viewMode })"
                               class="list-group-item list-group-item-action d-flex justify-content-between align-items-center @(selectedCategoryId != null && selectedCategoryId == categoryItem.CategoryID ? "fw-bold" : "")">
                                @categoryItem.CategoryName
                                @if (allSubCategories.Any(s => s.CategoryID == categoryItem.CategoryID))
                                {
                                    <i class="fas fa-chevron-right category-toggle-icon"></i>
                                }
                            </a>
                            @{
                                var subCategoriesForCurrentCategory = allSubCategories.Where(s => s.CategoryID == categoryItem.CategoryID).ToList();
                            }
                            @if (subCategoriesForCurrentCategory.Any())
                            {
                                <div class="subcategory-list" style="@((selectedCategoryId != null && selectedCategoryId == categoryItem.CategoryID) ? "display: block;" : "display: none;")">
                                    @foreach (var subCategoryItem in subCategoriesForCurrentCategory)
                                    {
                                        <a href="@Url.Action("Index", "Product", new { subCategoryId = subCategoryItem.SubCategoryID, searchTerm, sortOrder = currentSort, minPrice = (ViewBag.MinPriceQuery ?? 0), maxPrice = (ViewBag.MaxPriceQuery ?? 10000000), viewMode })"
                                           class="list-group-item list-group-item-action subcategory-item @(selectedSubCategoryId != null && selectedSubCategoryId == subCategoryItem.SubCategoryID ? "fw-bold" : "")">
                                            @subCategoryItem.SubCategoryName
                                        </a>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Lọc theo giá</h5>
                </div>
                <div class="card-body">
                    <form id="priceFilterForm" method="get" action="@Url.Action("Index", "Product")">
                        @if (selectedCategoryId != null)
                        {
                            <input type="hidden" name="categoryId" value="@selectedCategoryId" />
                        }
                        @if (selectedSubCategoryId != null)
                        {
                            <input type="hidden" name="subCategoryId" value="@selectedSubCategoryId" />
                        }
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <input type="hidden" name="searchTerm" value="@searchTerm" />
                        }
                        @if (!string.IsNullOrEmpty(currentSort))
                        {
                            <input type="hidden" name="sortOrder" value="@currentSort" />
                        }
                        <input type="hidden" name="viewMode" value="@viewMode" />

                        <div class="mb-3">
                            <label for="minPriceInput" class="form-label">Giá tối thiểu</label>
                            <input type="number" class="form-control" id="minPriceInput" name="minPrice" value="@minPrice" min="0" step="10000">
                        </div>
                        <div class="mb-3">
                            <label for="maxPriceInput" class="form-label">Giá tối đa</label>
                            <input type="number" class="form-control" id="maxPriceInput" name="maxPrice" value="@maxPrice" min="0" step="10000">
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Áp dụng</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <p class="mb-0">Hiển thị @Model.Count() sản phẩm gốm sứ (trong tổng số @totalItems sản phẩm)</p>
                <div class="d-flex align-items-center">
                    <form id="sortForm" method="get" action="@Url.Action("Index", "Product")" class="d-flex align-items-center me-3">
                        @if (selectedCategoryId != null)
                        {
                            <input type="hidden" name="categoryId" value="@selectedCategoryId" />
                        }
                        @if (selectedSubCategoryId != null)
                        {
                            <input type="hidden" name="subCategoryId" value="@selectedSubCategoryId" />
                        }
                        @if (minPrice > 0)
                        {
                            <input type="hidden" name="minPrice" value="@minPrice" />
                        }
                        @if (maxPrice < 10000000)
                        {
                            <input type="hidden" name="maxPrice" value="@maxPrice" />
                        }
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <input type="hidden" name="searchTerm" value="@searchTerm" />
                        }
                        <input type="hidden" name="viewMode" value="@viewMode" />

                        <label class="me-2" for="sortOrder">Sắp xếp:</label>
                        <select id="sortOrder" name="sortOrder" class="form-select form-select-sm" style="width: auto;" onchange="this.form.submit()">
                            <option value="" selected="@isDefaultSort">Mới nhất</option>
                            <option value="price_asc" selected="@isPriceAscSort">Giá tăng dần</option>
                            <option value="price_desc" selected="@isPriceDescSort">Giá giảm dần</option>
                            <option value="name_asc" selected="@isNameAscSort">Tên A-Z</option>
                            <option value="name_desc" selected="@isNameDescSort">Tên Z-A</option>
                        </select>
                    </form>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-secondary btn-sm @(viewMode == "grid" ? "active" : "")" id="gridView">
                            <i class="fas fa-th-large"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm @(viewMode == "list" ? "active" : "")" id="listView">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div id="productsGrid" class="row product-grid-view @(viewMode == "list" ? "d-none" : "")">
                @if (Model != null && Model.Any())
                {
                    foreach (var product in Model)
                    {
                        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                            <div class="card product-card h-100">
                                <div class="product-image">
                                    <a href="@Url.Action("Details", "Product", new { id = product.ProductID })">
                                        <img src="/Images/@product.MainImagePath" alt="@product.ProductName" class="card-img-top">
                                    </a>
                                    @if (product.DiscountPercentage.HasValue && product.DiscountPercentage > 0 && product.HasSpecificPromotion)
                                    {
                                        <div class="discount-badge">-@product.DiscountPercentage%</div>
                                    }
                                </div>
                                <div class="card-body product-info">
                                    <h5 class="card-title product-title"><a href="@Url.Action("Details", "Product", new { id = product.ProductID })">@product.ProductName</a></h5>
                                    <div class="product-category">@product.CategoryName / @product.SubCategoryName</div>
                                    <div class="product-price mt-2">
                                        @if (product.DiscountedPrice.HasValue && product.DiscountedPrice < product.Price && product.HasSpecificPromotion)
                                        {
                                            <span class="original-price">@product.Price.ToString("N0") VNĐ</span>
                                            <span class="current-price">@product.DiscountedPrice.Value.ToString("N0") VNĐ</span>
                                        }
                                        else
                                        {
                                            <span class="current-price">@product.Price.ToString("N0") VNĐ</span>
                                        }
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent border-top-0">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-primary btn-sm add-to-cart" data-product-id="@product.ProductID" data-product-name="@product.ProductName">
                                            <i class="fas fa-shopping-cart"></i> Thêm vào giỏ
                                        </button>
                                        @{
                                            string wishlistBtnClass = product.IsInUserWishlist ? "active-wishlist" : "";
                                            string heartIcnClass = product.IsInUserWishlist ? "fas" : "far";
                                        }
                                        <button class="btn btn-outline-danger btn-sm btn-wishlist @wishlistBtnClass"
                                                data-product-id="@product.ProductID"
                                                data-product-name="@product.ProductName"
                                                data-ajax-url="@Url.Action("ToggleWishlist", "Wishlist")"
                                                data-login-url="@Url.Action("Login", "Account")"
                                                data-is-wishlisted="@product.IsInUserWishlist.ToString().ToLower()">
                                            <i class="@heartIcnClass fa-heart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i> Không tìm thấy sản phẩm gốm sứ nào phù hợp.
                        </div>
                    </div>
                }
            </div>

            <!-- Products List -->
            <div id="productsList" class="product-list-view @(viewMode == "grid" ? "d-none" : "")">
                @if (Model != null && Model.Any())
                {
                    foreach (var product in Model)
                    {
                        <div class="card product-card mb-3 product-list-item">
                            <div class="row g-0">
                                <div class="col-md-3">
                                    <div class="product-image h-100">
                                        <a href="@Url.Action("Details", "Product", new { id = product.ProductID })">
                                            <img src="/Images/@product.MainImagePath" alt="@product.ProductName" class="img-fluid rounded-start">
                                        </a>
                                        @if (product.DiscountPercentage.HasValue && product.DiscountPercentage > 0 && product.HasSpecificPromotion)
                                        {
                                            <div class="discount-badge">-@product.DiscountPercentage%</div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-9">
                                    <div class="card-body product-info">
                                        <h5 class="card-title product-title">
                                            <a href="@Url.Action("Details", "Product", new { id = product.ProductID })">@product.ProductName</a>
                                        </h5>
                                        <div class="product-category">@product.CategoryName / @product.SubCategoryName</div>
                                        <p class="card-text mt-2">@(product.Description != null ? (product.Description.Length > 150 ? product.Description.Substring(0, 150) + "..." : product.Description) : "")</p>
                                        <div class="product-price mt-2">
                                            @if (product.DiscountedPrice.HasValue && product.HasSpecificPromotion)
                                            {
                                                <span class="original-price">@product.Price.ToString("N0") VNĐ</span>
                                                <span class="current-price">@product.DiscountedPrice.Value.ToString("N0") VNĐ</span>
                                            }
                                            else
                                            {
                                                <span class="current-price">@product.Price.ToString("N0") VNĐ</span>
                                            }
                                        </div>
                                        <div class="mt-3">
                                            <button class="btn btn-primary add-to-cart" data-product-id="@product.ProductID" data-product-name="@product.ProductName">
                                                <i class="fas fa-shopping-cart"></i> Thêm vào giỏ
                                            </button>
                                            @{
                                                string wishlistBtnClass = product.IsInUserWishlist ? "active-wishlist" : "";
                                                string heartIcnClass = product.IsInUserWishlist ? "fas" : "far";
                                            }
                                            <button class="btn btn-outline-danger ms-2 btn-wishlist @wishlistBtnClass"
                                                    data-product-id="@product.ProductID"
                                                    data-product-name="@product.ProductName"
                                                    data-ajax-url="@Url.Action("ToggleWishlist", "Wishlist")"
                                                    data-login-url="@Url.Action("Login", "Account")"
                                                    data-is-wishlisted="@product.IsInUserWishlist.ToString().ToLower()">
                                                <i class="@heartIcnClass fa-heart"></i> Yêu thích
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info @(viewMode == "list" ? "" : "d-none")">
                        <i class="fas fa-info-circle me-2"></i> Không tìm thấy sản phẩm gốm sứ nào phù hợp.
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", "Product", new { categoryId = selectedCategoryId, subCategoryId = selectedSubCategoryId, searchTerm, sortOrder = currentSort, minPrice, maxPrice, page = currentPage - 1, viewMode })" aria-label="Previous">
                                <span aria-hidden="true">«</span>
                            </a>
                        </li>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", "Product", new { categoryId = selectedCategoryId, subCategoryId = selectedSubCategoryId, searchTerm, sortOrder = currentSort, minPrice, maxPrice, page = i, viewMode })">@i</a>
                            </li>
                        }

                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", "Product", new { categoryId = selectedCategoryId, subCategoryId = selectedSubCategoryId, searchTerm, sortOrder = currentSort, minPrice, maxPrice, page = currentPage + 1, viewMode })" aria-label="Next">
                                <span aria-hidden="true">»</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            function updateQueryParam(key, value, reloadPage = false) {
                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set(key, value);
                var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();
                if (reloadPage) {
                    window.location.href = newRelativePathQuery;
                } else {
                    history.pushState({ path: newRelativePathQuery }, '', newRelativePathQuery);
                }
            }

            $('#gridView').click(function () {
                if (!$(this).hasClass('active')) {
                    $(this).addClass('active');
                    $('#listView').removeClass('active');
                    $('#productsGrid').removeClass('d-none');
                    $('#productsList').addClass('d-none');
                    updateQueryParam('viewMode', 'grid');
                }
            });

            $('#listView').click(function () {
                if (!$(this).hasClass('active')) {
                    $(this).addClass('active');
                    $('#gridView').removeClass('active');
                    $('#productsList').removeClass('d-none');
                    $('#productsGrid').addClass('d-none');
                    updateQueryParam('viewMode', 'list');
                }
            });

            $('.add-to-cart').click(function () {
                var productId = $(this).data('product-id');
                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: { productId: productId, quantity: 1 },
                    success: function (data) {
                        if (data.success) {
                            if (data.cartCount !== undefined) {
                                $('.cart-count').text(data.cartCount);
                                var cartCountElement = $('.cart-count');
                                cartCountElement.addClass('cart-pulse');
                                setTimeout(function () {
                                    cartCountElement.removeClass('cart-pulse');
                                }, 500);
                            }
                        } else {
                            if (window.showNotification) window.showNotification(data.message || 'Không thể thêm sản phẩm.', 'danger');
                            else alert(data.message || 'Không thể thêm sản phẩm.');
                        }
                    },
                    error: function () {
                        if (window.showNotification) window.showNotification('Lỗi khi thêm sản phẩm vào giỏ hàng.', 'danger');
                        else alert('Lỗi khi thêm sản phẩm vào giỏ hàng.');
                    }
                });
            });

            $('.category-item > a').on('click', function (e) {
                var $this = $(this);
                var $nextSubcategoryList = $this.next('.subcategory-list');
                var $icon = $this.find('.category-toggle-icon');

                var href = $this.attr('href');
                var isPlaceholderLink = href === '#' || href === 'javascript:void(0);';

                if ($nextSubcategoryList.length > 0) {
                    if (isPlaceholderLink || !href) {
                        e.preventDefault();
                    } else {
                        if (!$(e.target).is('i.category-toggle-icon')) {
                            if ($this.hasClass('fw-bold')) {
                                e.preventDefault();
                            } else {
                                $('.subcategory-list').not($nextSubcategoryList).slideUp();
                                $this.closest('.list-group-flush').find('.category-item > a').not($this)
                                    .find('.category-toggle-icon').removeClass('fa-chevron-down').addClass('fa-chevron-right');
                            }
                        } else {
                            e.preventDefault();
                        }
                    }
                } else {
                    return;
                }

                if (!$nextSubcategoryList.is($this.closest('.list-group-flush').find('.subcategory-list:visible').not($nextSubcategoryList))) {
                    $('.subcategory-list').not($nextSubcategoryList).slideUp();
                    $this.closest('.list-group-flush').find('.category-item > a').not($this)
                        .find('.category-toggle-icon').removeClass('fa-chevron-down').addClass('fa-chevron-right');
                }

                $nextSubcategoryList.slideToggle(function () {
                    if ($nextSubcategoryList.is(':visible')) {
                        $icon.removeClass('fa-chevron-right').addClass('fa-chevron-down');
                    } else {
                        $icon.removeClass('fa-chevron-down').addClass('fa-chevron-right');
                    }
                });
            });

            var currentSelectedCategoryId = @(selectedCategoryId != null ? Json.Serialize(selectedCategoryId) : "null");
            if (currentSelectedCategoryId !== null) {
                $('.category-item > a').each(function () {
                    var $link = $(this);
                    var linkHref = $link.attr('href');
                    try {
                        if (linkHref && new URLSearchParams(new URL(window.location.origin + linkHref).search).get('categoryId') == currentSelectedCategoryId.toString()) {
                            $link.next('.subcategory-list').show();
                            $link.find('.category-toggle-icon').removeClass('fa-chevron-right').addClass('fa-chevron-down');
                        }
                    } catch (e) { console.error("Error parsing URL for category matching on product: ", e, linkHref); }
                });
            }
        });
    </script>
}